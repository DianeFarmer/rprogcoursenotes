/ root directory
~ home directory
pwd path to working directory
recipe: command flags argument
flags preceded by -
clear will clear all commands from window
ls list files
ls -a list all files including hidden
ls -l list files with details
ls -al combine flags
cd change directory
cd no arg: home dir
cd ..: go one level up
mkdir make directory
mkdir mynewdirectory
touch creates empty file
touch test_file
cp copy(file, where to send copy)
cp test_file Documents
cp -r move contents of one directory to another (recursive)
cp -r Documents More_docs
rm remove
rm cannot be undone
rm -r to recursively remove entire directory
mv move
mv new_file Documents
mv test_file new_file (rename file)
echo prints whatever arguments you provide
echo to print contents of stored variables
date prints today's date

pwd
clear
ls
cd
mkdir
touch
cp
rm
mv
date
echo


git config --global user.name ""
git config --global user.email ""
git config -- list
exit


intro github
push and pull local repositories to remote repositories
user repo backed up on github

creating a github repo
-start repo from scratch
-fork another user's repo

start a repo
-go to profile page click create new repo
-or got to some other annoying link
-create name and description
-select public
-check box "initialize with README"
-click "create repository"

create a local copy
-open gitbash
-create a directory to store repo (mkdir ~/test-repo)
-navigate to this directory (cd ~/test-repo)
-initialize a local git repository in this directory (git init)
-point your local repo at the main repo you created on github
$ git remote add origin https://github.com/yourUserName/test-repo.git

fork another user's repo
-navigate to their github page and click fork this repo
-that gives you a copy on your github acct
-now make a local copy of this repo on your computer
-they call it "cloning."
$ git clone https://github.com/yourUserName/repoName.git
(clones the repo into your current directory)

push to github
-if you make changes to your local copy you may want to do this

basic git commands
structure: workspace -> index -> local repo -> remote repo
workspace to index: add (-u)
index to local repo: commit
local to remote: push
workspace to local repo: commit -a
backwards between any level: pull, or, rebase
remote to local: fetch
revert local to workspace: checkout HEAD
revert index to workspace: checkout
compare local to workspace: diff HEAD
compare index to workspace: diff


ADDING
git add . 	adds all new files
git add -u	updates tracking for files that hanged name or were deleted
git add -A	does both of the previous
do all of this before committing.

COMMITTING
-you have changes you want to commit to be saved as an intermediate version
git commit -m "message" where "message" is a useful description of what you did
-this only updates local repo

PUSHING
-you have saved local commits you would like to update on the remote (github)
git push

BRANCHES
-if you are working on a project with a version being used by many people
-you may not want to edit that version
-create a branch instead
git checkout -b branchname
-see what branch you are on
git branch
-to switch back to the master branch
git checkout master

PULL REQUESTS
-if you fork someone's repo or have miltiple branches you will be working seperately
-sometimes you want to merge your changes into the other branch/repo
-to do this send a pull request
-feature of github
-compare and pull request button(green)

https://help.github.com


# need to add notes on moving files to repo, and 
# on dealing with the Vim editor when creating README



