r porgramming notes Week One

VECTORS AND LISTS

c() to create vectors of objects
vector("datatype", length=##)


COERCION
mixing objects in a vector incurs type coercion
coercion will happen without returning an error
as.* function will explicitly coerce type
nonsensical coercion will result in NAs

LISTS
vectors that can contain different classes of data
elements indexed by [[]]
x <- list(1, "a", TRUE, 1+4i)
x [[1]][1] # returns 1
x [[2]][1] # returns "a"
etc

MATRICES
vectors with a dimension attribute
dimension attribute is itself an integer vector of length 2(nrow,ncol)
constructed column-wise	
m <- matrix(1:6, nrow=2, ncol=3)
m

matrices can be created directly from vectors by adding a dimension attribute.
m <- 1:10
dim(m) <- c(2, 5)
# m is now a matrix

cbind() and rbind()

FACTORS
represent categorical data
2 types: unordered or ordered
integer vector where each integer has a label
labels are better because they are self-describing
factors are treated specially by modeling funtions like lm() and glm()

create factors with factor()
x <- factor(c("yes", "yes", "no", "yes", "no"))
levels: no yes
table(x)
unclass(x)
attr(,"levels")

order of levels can be set using the levels argument to the factors() function.
important in linear modeling because the first level is used as the baseline level
levels=c("yes", "no") explicitly casts the levels in order specified

MISSING VALUES
NA
NaN
is.na() tests for NA
is.nan() tests for NaN
NA values have a class (eg integer NA, character NA, etc)
Nan is also NA but converse is not true


DATA FRAMES
store tabular data
special type of list where each element has the same length
each element of list is a column
length of each element is the number of rows
different classes in different columns is OK
special attribute: row.names
DF's usually created using read.csv or read.table()
can be converted to matrix by calling data.matrix()
that will incur coercion

x <- data.frame(foo=1:4, bar=c(T,T,F,F))
nrow(x)
ncol(x)

NAMES ATTRIBUTE
r objects can have names
x <- 1:3
names(x) # returns NULL
names(x) <- c("foo", "bar", "norf")
x
foo	bar	norf
1	2	3

lists can have names
x <- list(a=1, b=2, c=3)

matrices too
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m) <- list(c("a","b", "c", "d"))
m # returns matrix with row names and column names


READING TABULAR DATA
read.table
read.csv
readLines #lines of a text file
source
dget
load (reading in saved workspaces)
unserialize

WRITING
write.table, etc

ARGUMENTS OF read.table()
file: the name of a file, or a connection
header: logical indicating if the file has a header line
sep: a string indicating how the columns are separated
colClasses: a character vector indicating the class of each column in the dataset
nrows: the number of rows in the dataset
comment.char: a character string indicating the comment character
skip: the number of lines to skip from the beginning
stringsAsFactors: should character variables be coded as factors?

make a habit of using colClasses so that data frames load in faster


READING LARGE TABLES
read the help page for read.table
set comment.char="" if there are no comment liines in your file

trick to figure out the colClasses before loading in dataset:
initial <- read.table("datatable.txt", nrows=100) # 100 is arbitrary
classes <- sapply(initial, class)
tabAll <- read.table("datatable.txt",
		     colClasses = classes)

TEXTUAL DATA FORMATS
dump()
dput()
these preserve metadata
still in textual format
can work better with git which track changes in text files
can be longer-lived
editable(if file is corrupted)
downside: the format is not very space-efficient

D-PUT'ING R OBJECTS
passing data around by deparsing with dput() and reading back in using dget()

DUMPING R OBJECTS
multiple objects can be deparsed using the dump function and read back in using source

INTERFACES TO THE OUTSIDE WORLD
data are read in using connection interfaces
connections can be made to files (most common) or to other more exotic things
* file, opens a connection to a file
* gzfile, opens a connection to a file compressed with gzip
* bzfile, opens connection to a file compressed with bzip2
* url opens a connection to a web page

FILE CONNECTIONS
file(description = "", open = "", blocking = TRUE, encoding=getOption("encoding"))
* description is the name of the file
* open is a code indicating
	- "r" read only
	- "w" writing (and initializing a new file)
	- "a" appending
	- "rb", "wb", "ab" reading, writing or appending in binary mode (Windows)

CONNECTIONS
con <- file("foo.txt", "r")
data <- read.csv(con)
close(con)
is the same as 
data <- read.csv ("foo.txt")

con <- gzfile("words.gz")
x <- readLines(con, 10)

writeLines takes a character vector and writes out eaach element one  line at a time in the text file

readLines can be useful in reading line s fo webpages
con <- url("httpfff.com", "r")
x <- readLines(con)

SUBSETTING (BASICS)
[ always returns object of the same class as the original
	can be used to select more than one element (there is one exception)
[[ is used to extract element of a list or a data frame.
can only be used to select a single element and the class of the returned object will not necessarily be a list or a data frame

subset a vector with another, logical, vector

x <- c("a", "b", "c", "c", "d", "a")
u <- x > "a"
u # returns F T T T T F
x[u] # returns "b" "c" "c" "d"

SUBSETTING LISTS
x <- list(foo=1:4, bar=0.6)
x[1] # returns $foo [1] 1 2 3 4
x[[1]] # returns [1] 1 2 3 4
x$bar # returns [1] 0.6
x[["bar"]] # returns [1] 0.6
x["bar"] # returns $bar [1] 0.6

to extract multiple elements of the list, use the single bracket operator [

[[ operator can be used with computed indices
$ can only be used with literal names


SUBSETTING NESTED ELEMENTS OF LISTS
[[ can take an integer sequence
x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))	
x[[c(1,3)]]
# returns [1] 14
x[[1]][[3]]
# returns [1] 14
x[[c(2,1)]]
# returns 3.14

SUBSETTING MATRICES
uses (i,j) type indice

indices can be missing # x[,4]

by default, when a single element of a matrix is retrieved, 
it is returned as a vector of length 1 rather than a 1x1 matrix
drop=FALSE will turn off this behavior

PARTIAL MATCHING
partial matching of names i s allowed  with [[ and $ opertors
x <- list(aardvark=1:5)
x$a # returns the vector
x[["a"]] # returns NULL
x[["a", exact=FALSE]] # returns the vector

REMOVING NA VALUES
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
x[!bad]
# returns vector without NA values

what if there are multiple things and you want to take the subset with no missing values?
x <- some vector
y <- some other vector
good <- complete.cases(x,y)
good # returns logical vector
x[good] # returns the subset of x without NAs
y[good] # same deal

# use the above on the programming assignment

complete.cases can be used to remove missing values from data frames
get the rows where nothing is missing
airquality[1:6,] # has some missing values
good <- complete.cases(airquality)
airquality[good, ][1:6, ] # one subset is then subset another way

VECTORIZED OPERATIONS
helps make code concise, efficient, and easier to read
x <- 1:4; y <- 6:9
x+y # returns [1] 7 9 11 13
x > 2 # returns [1] F F T T
y == 8 # returns [1] F F T F
x * y, x / y, etc

VECTORIZED MATRIX OPERATIONS
x * y ##element-wise multiplication
x %*% y # true matrix multiplication







